/*******************************************************************************
 * (c) Copyright 2021 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.cli.ssc.session.cli.cmd;

import com.fortify.cli.common.rest.runner.config.IUrlConfig;
import com.fortify.cli.common.rest.runner.config.IUserCredentials;
import com.fortify.cli.common.session.cli.cmd.AbstractSessionLoginCommand;
import com.fortify.cli.ssc.session.cli.mixin.SSCSessionLoginOptions;
import com.fortify.cli.ssc.session.cli.mixin.SSCSessionLoginOptions.SSCUserCredentialOptions;
import com.fortify.cli.ssc.session.manager.SSCSessionData;
import com.fortify.cli.ssc.session.manager.SSCSessionDataManager;
import com.fortify.cli.ssc.token.helper.SSCTokenCreateRequest;
import com.fortify.cli.ssc.token.helper.SSCTokenCreateResponse;
import com.fortify.cli.ssc.token.helper.SSCTokenHelper;

import jakarta.inject.Inject;
import lombok.Getter;
import picocli.CommandLine.Command;
import picocli.CommandLine.Mixin;

@Command(name = "login", sortOptions = false, resourceBundle = "com.fortify.cli.ssc.i18n.SSCMessages")
public class SSCSessionLoginCommand extends AbstractSessionLoginCommand<SSCSessionData> {
    @Getter @Inject private SSCSessionDataManager sessionDataManager;
    @Inject private SSCTokenHelper tokenHelper;
    @Mixin private SSCSessionLoginOptions sessionLoginOptions;
    
    @Override
    protected void logoutBeforeNewLogin(String sessionName, SSCSessionData sessionData) {
        IUserCredentials userCredentialsConfig = sessionLoginOptions.getUserCredentialOptions();
        // TODO Should we also check whether SSC URL's from options and session data match?
        if ( userCredentialsConfig!=null && sessionData.getTokenId()!=null ) {
            // TODO Catch exceptions, log warning
            tokenHelper.deleteTokensById(sessionData.getUrlConfig(), userCredentialsConfig, sessionData.getTokenId());
        } else {
            // TODO Log warning, trow exception, ...?
        }
    }
    
    @Override
    protected SSCSessionData login(String sessionName) {
        IUrlConfig urlConfig = sessionLoginOptions.getUrlConfigOptions();
        char[] token = sessionLoginOptions.getRestToken();
        SSCUserCredentialOptions uc = sessionLoginOptions.getUserCredentialOptions();
        SSCSessionData sessionData = new SSCSessionData(urlConfig);
        if ( token!=null ) {
            sessionData.setPredefinedToken(token);
        } else if ( sessionLoginOptions.hasUserCredentials() ) {
            SSCTokenCreateRequest tokenCreateRequest = SSCTokenCreateRequest.builder()
                .description("Auto-generated by fcli ssc session login command")
                .terminalDate(uc.getExpiresAt())
                .type("UnifiedLoginToken")
                .build();
            SSCTokenCreateResponse tokenCreateResponse = tokenHelper.createToken(urlConfig, uc, tokenCreateRequest, SSCTokenCreateResponse.class);
            sessionData.setCachedTokenResponse(tokenCreateResponse);
        } else {
            throw new IllegalArgumentException("Either SSC token or user credentials must be provided");
        }
        return sessionData;
    }
}
